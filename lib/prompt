#! /usr/bin/env bash
#
# User input prompts
#
# Exports:
#   @go.read_prompt_response
#     Reads a line, trims leading/trailing space, and sets a default if empty
#
#   @go.prompt_for_input
#     Prompts the user for a line of input
#
#   @go.prompt_for_safe_input
#     Prompts the user for a line of input, then validates it isn't dangerous
#
#   @go.prompt_for_yes_or_no
#     Prompts the user for a yes or no response
#
#   @go.select_option
#     Prompts the user to select one item from a list of options

. "$_GO_USE_MODULES" 'strings' 'validation'

# Reads a line, trims leading/trailing space, and sets a default if empty
#
# Arguments:
#   var_name:  Name of the caller's variable into which to read value
#   default:   (Optional) Default value if the input line is empty
@go.read_prompt_response() {
  @go.validate_identifier_or_die 'Input prompt response variable name' "$1"
  read -r "$1"
  @go.trim "$1"
  printf -v "$1" -- '%s' "${!1:-$2}"
}

# Prompts the user for a line of input
#
# If the prompt doesn't end with a whitespace character, a space will be added
# between the prompt and the input cursor. Otherwise the existing character will
# be preserved.
#
# If a default value is specified, a space will be added to the prompt, followed
# by the default value in square brackets; the caller should not add the default
# value to the prompt directly. If the prompt ends with a whitespace character,
# it will be preserved and added after the default value.
#
# Arguments:
#   result_var  Name of the caller-declared variable for the result
#   prompt      Text prompt for user input
#   default     (Optional) Default value if response is empty
#   fail_msg    (Optional) Failure message if empty input isn't valid
@go.prompt_for_input() {
  @go.validate_identifier_or_die 'Input prompt response variable name' "$1"

  if [[ "$2" =~ [[:space:]]$ ]]; then
    @go.printf '%s%s%s' "${2%?}" "${3:+ [default: $3]}" "${BASH_REMATCH[0]}" >&2
  else
    @go.printf '%s %s' "$2" "${3:+[default: $3] }" >&2
  fi
  @go.read_prompt_response "$1" "$3"

  if [[ -z "${!1}" && -n "$4" ]]; then
    @go.printf '%s\n' "$4" >&2
    return 1
  fi
}

# Prompts the user for a line of input, then validates it isn't dangerous
#
# With the exception of the `--or-die` option, the arguments are the same as the
# underlying `@go.prompt_for_input`. Useful if the input value may be used to
# construct a command or query.
#
# Options (must be specified before arguments):
#   --or-die <desc>  Print description and stack and exit with error if invalid
#
# Arguments:
#   result_var  Name of the caller-declared variable for the result
#   prompt      Text prompt for user input
#   default     (Optional) Default value if response is empty
#   fail_msg    (Optional) Failure message if empty input isn't valid
@go.prompt_for_safe_input() {
  local or_die
  local description

  if [[ "$1" == '--or-die' ]]; then
    or_die='true'
    description="$2"
    shift 2
  fi
  @go.validate_identifier_or_die 'Input prompt response variable name' "$1"

  if ! @go.prompt_for_input "$@"; then
    return 1
  elif [[ "$or_die" == 'true' ]]; then
    @go.validate_input_or_die "$description" "${!1}"
  elif ! @go.validate_input "${!1}"; then
    @go.printf '"%s" is an invalid response, as it contains %s.\n' \
      "${!1}" 'unescaped shell metacharacters or control operators' >&2
    return 1
  fi
}

# Prompts the user for a yes or no response
#
# Arguments:
#   prompt   Text prompt for user input
#   default  (Optional) Default response; must be 'yes' or 'no'
#
# Returns:
#   Zero on 'y' or 'yes' (case- and space- insensitive), nonzero otherwise
@go.prompt_for_yes_or_no() {
  local prompt="$1"
  local default="${2-}"
  local response

  case "$default" in
  yes)
    @go.printf '%s [Y/n] ' "$prompt" >&2
    ;;
  no)
    @go.printf '%s [y/N] ' "$prompt" >&2
    ;;
  '')
    @go.printf '%s [y/n] ' "$prompt" >&2
    ;;
  *)
    @go.printf 'Invalid `default` parameter "%s" for %s at:\n' \
      "$default" "$FUNCNAME" >&2
    @go.print_stack_trace '1' >&2
    exit 1
    ;;
  esac

  while true; do
    @go.read_prompt_response 'response' "$default"

    if [[ "$response" =~ ^[Yy]([Ee][Ss])?$ ]]; then
      return 0
    elif [[ "$response" =~ ^[Nn]([Oo])?$ ]]; then
      return 1
    else
      if [[ -n "$response" ]]; then
        @go.printf '\n"%s" is an invalid response.\n' "$response" >&2
      fi
      @go.printf '\nPlease answer Y(es) or N(o): ' >&2
    fi
  done
}

# Prompts the user to select one item from a list of options.
#
# This is a thin wrapper around the `select` builtin command for
# straightforward, single-option user prompts. If you need to do anything more
# complex, use the `select` builtin command directly.
#
# This will prompt the user for a single input, returned in the caller-declared
# variable identified by `result_var`. If the user enters an invalid option,
# this will notify the user and prompt again. If the user terminates input (via
# EOF, i.e. Ctrl-D), `result_var` will remain unchanged and the function will
# return nonzero.
#
# Globals:
#   PS3  environment variable defining the selection prompt
#
# Arguments:
#   result_var:  Name of the caller-declared variable used to store the option
#   ...:         Strings representing options available for the user to select
#
# Returns:
#   zero if `result_var` contains the user's selection, nonzero otherwise
@go.select_option() {
  @go.validate_identifier_or_die 'Input selection variable name' "$1"

  local __go_selected_option
  select __go_selected_option in "${@:2}"; do
    case "$__go_selected_option" in
    '')
      @go.printf '"%s" is not a valid option.\n' "$REPLY" >&2
      ;;
    *)
      printf -v "$1" -- '%s' "$__go_selected_option"
      break
      ;;
    esac
  done
  [[ -n "$__go_selected_option" ]]
}

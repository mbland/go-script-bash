#! /bin/bash
#
# Automatic command and argument completion utilities
#
# Exports:
#   @go.compgen
#     Wrapper around the `compgen` to ensure compatibility with `./go complete`
#
#   @go.complete_remove_completions_already_present
#     Removes completion values already present in an argument array

# Wrapper around the `compgen` to ensure compatibility with `./go complete`
#
# Use this instead of using `compgen` directly, especially if you are using the
# `-f` or `-d` options to generate file or directory paths.
#
# Arguments:
#   ...:  Arguments passed directly to the builtin `compgen`
@go.compgen() {
  local add_slashes
  local compreply=()
  local reply_item
  local compgen_exit_index

  while IFS= read -r reply_item; do
    compreply+=("$reply_item")
  done < <(trap 'echo "$?"' EXIT; compgen "$@"; exit "$?")

  compgen_exit_index="$((${#compreply[@]} - 1))"

  if [[ "${compreply[$compgen_exit_index]}" -eq '1' ]]; then
    return "$_GO_EC_NOTFND"
  elif [[ "${compreply[$compgen_exit_index]}" -eq '2' ]]; then
    return "$_GO_EC_USAGE"
  elif [[ "${compreply[$compgen_exit_index]}" -ne '0' ]]; then
    # probably never occurs
    return "${compreply[$compgen_exit_index]}"
  fi
  unset "compreply[$compgen_exit_index]"

  if [[ "$1" =~ ^-[df]$ ]]; then
    add_slashes='true'
  fi

  for reply_item in "${compreply[@]}"; do
    # Since we're not using -o filenames, we must add slashes to dir names.
    # Since we're using -o nospace, we must add a space to a single match.
    if [[ -n "$add_slashes" && -d "$reply_item" ]]; then
      printf -- '%s/\n' "$reply_item"
    elif [[ "${#compreply[@]}" -eq '1' && ! $reply_item =~ [\ /]$ ]]; then
      printf -- '%s \n' "$reply_item"
    else
      printf -- '%s\n' "$reply_item"
    fi
  done
}

# Removes completion values already present in an argument array
#
# NOTE: The word being completed should already be removed from the argument
# array. Save it in a separate variable, remove it from the array, then call
# this function.
#
# Arguments:
#   $1: Name of the argument array in the caller's scope
#   $2: Name of the completion value array in the caller's scope
#   $3: Size of the completion value array
@go.complete_remove_completions_already_present() {
  local argv_reference="$1"
  local completions_reference="$2"
  local num_completions="$3"
  local argv_array_reference="$argv_reference[@]"
  local arg
  local completion_item_reference
  local i

  for arg in "${!argv_array_reference}"; do
    for ((i=0; i != num_completions; ++i)); do
      completion_item_reference="$completions_reference[$i]"
      if [[ "${!completion_item_reference}" == "$arg" ]]; then
        unset "$completions_reference[$i]"
      fi
    done
  done

  return "$_GO_EC_OK"
}

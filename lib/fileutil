#! /usr/bin/env bash
#
# File and directory management
#
# Exports:
#   @go.create_dirs
#     Creates a set of directories and any missing parents
#
#   @go.collect_file_paths
#     Collects all the paths to regular files within a directory structure
#
#   @go.copy_files_safely
#     Safely copy files into a target directory, preserving relative directories
#
#   @go.mirror_directory
#     Mirror one local directory to another using `tar`

. "$_GO_USE_MODULES" 'diff' 'log' 'path'

# Creates a set of directories and any missing parents
#
# If the directory already exists, this will not update its permissions.
#
# Provides a bit more thorough error-checking and feedback than just using
# `mkdir -p` and `chmod -R`. Errors are reported via `@go.log FATAL`, which will
# show a stack trace and crash the program.
#
# Options:
#   --mode:  Permissions for created directories
#
# Arguments:
#   $@:  Paths of directories to create
@go.create_dirs() {
  local dir
  local mode
  local __go_missing_parent

  if [[ "$1" == '--mode' ]]; then
    mode="$2"
    shift 2
  fi

  for dir in "$@"; do
    if [[ -z "$dir" ]]; then
      @go.log FATAL 'The empty string is not a valid directory name'
    elif [[ ! -d "$dir" ]]; then
      @go.walk_path_forward '_@go.find_missing_parent_path' "$dir" || :

      if [[ -e "$__go_missing_parent" ]]; then
        @go.log FATAL "$__go_missing_parent exists and is not a directory"
      elif ! mkdir -p "$dir"; then
        @go.log FATAL "Could not create $dir in ${__go_missing_parent%/*}"
      elif [[ -n "$mode" ]] && ! chmod -R "$mode" "$__go_missing_parent"; then
        @go.log FATAL "Could not set permissions for $__go_missing_parent"
      fi
    fi
  done
}

# Collects all the paths to regular files within a directory structure
#
# Globals:
#   __go_collected_file_paths:  Caller-defined array in which paths are stored
#
# Arguments:
#   $@:  Paths from which to collect paths for regular files
@go.collect_file_paths() {
  __go_collected_file_paths=()
  @go.walk_file_system _@go.collect_file_paths_impl "$@"
}

# Safely copy files into a target directory, preserving relative directories
#
# Enables copying of selected files from one directory structure into another
# with safety and feedback mechanisms. Useful for ensuring a target directory
# stays in-sync with a source directory, while being alerted to differences.
#
# If `--src-dir` is specified and no source file paths are given, then the
# contents of `--src-dir` will be copied, preserving the relative directory
# structure of `--src-dir`.
#
# If source file paths are given, relative file paths will be preserved for all
# files residing within `--src-dir`. Any absolute file paths and relative file
# paths resolving to a directory outside `--src-dir` will be copied directly to
# the top-level of `dest_dir` (i.e. no directory structure will be preserved).
#
# Options:
#   --src-dir:    Parent directory of src files (default: `PWD`)
#   --dir-mode:   Permissions to set for created directories
#   --file-mode:  Permissions to set for copied files
#   --edit:       Open _GO_DIFF_EDITOR to edit existing files that differ
#   --verbose:    Emit source and destination file logs
#
# Arguments:
#   src [src...]:  Paths to the files to copy
#   dest_dir:      Destination directory for the copied file
#
# Returns:
#   Zero if all files were copied, or if existing files had no differences
#   Nonzero if any existing files had any differences
#
# Raises:
#   `@go.log FATAL` on invalid or inaccessible file paths or failing file system
#     operations
@go.copy_files_safely() {
  local __go_src_dir
  local __go_dir_mode=()
  local __go_file_mode
  local __go_diff_files_args=()
  local __go_verbose
  local __go_src_files=()
  local __go_dest_dir
  local __go_source_file_errors=()
  local src
  local dest
  local result="$_GO_EC_OK"

  _@go.parse_copy_files_safely_args "$@"

  if ! _@go.set_source_files_for_copy_files_safely "${__go_src_files[@]}"; then
    printf -v '__go_source_file_errors' '\n  %s' "${__go_source_file_errors[@]}"
    @go.log FATAL "Source file list contains errors:$__go_source_file_errors"
  elif [[ "${#__go_src_files[@]}" -eq '0' && -n "$__go_dest_dir" ]]; then
    @go.log FATAL "No source files specified"
  elif [[ "${#__go_src_files[@]}" -ne '0' && -z "$__go_dest_dir" ]]; then
    @go.log FATAL "No destination directory specified"
  fi

  for src in "${__go_src_files[@]}"; do
    if [[ "${src:0:1}" == '/' ]]; then
      dest="$__go_dest_dir/${src##*/}"
    else
      dest="$__go_dest_dir/$src"
      src="$__go_src_dir/$src"
    fi

    if [[ -n "$__go_verbose" ]]; then
      @go.log INFO "Copying $src => $dest"
    fi

    if [[ -f "$dest" ]]; then
      if ! @go.diff_files "${__go_diff_files_args[@]}" "$src" "$dest"; then
        result='1'
      fi
    elif [[ -e "$dest" ]]; then
      @go.log FATAL "$dest exists but isn't a regular file"
    else
      @go.create_dirs "${__go_dir_mode[@]}" "${dest%/*}"

      if ! cp "$src" "$dest"; then
        @go.log FATAL "Failed to copy $src to $dest"
      elif [[ -n "$__go_file_mode" ]] && ! chmod "$__go_file_mode" "$dest"; then
        @go.log FATAL "Failed to set permissions on $dest"
      fi
    fi
  done
  return "$result"
}

# Mirror one local directory to another using `tar`
#
# Useful for creating a directory from which to create an archive, or for
# overwriting files unconditionally. Performs safety checks to ensure the
# source and destination directories aren't the same and that the source
# directory exists. Automatically creates the destination directory if it
# doesn't exist.
#
# If specific path arguments aren't given after the `src_dir` and `dest_dir`
# arguments, all of the items in `src_dir` will be included by default. If they
# are given, only those items will be mirrored.
#
# Uses only `tar` features that are portable across platform variants. More
# portable than `rsync`, which isn't installed by default on some systems; and
# can be faster than `cp -a`.
#
# Arguments:
#   src_dir:   Original directory path
#   dest_dir:  Mirrored directory path
#   ...:       Specific paths relative to `src_dir` to include in the mirror
@go.mirror_directory() {
  local src_dir="$1"
  local dest_dir="$2"
  local items=("${@:3}")
  local real_src
  local real_dest

  @go.canonicalize_path --pwd 'src_dir' "$1"
  @go.canonicalize_path --pwd 'dest_dir' "$2"

  @go.realpath 'real_src' "$src_dir"
  @go.realpath 'real_dest' "$dest_dir"

  if [[ "${#items[@]}" -eq '0' ]]; then
    items=('.')
  fi

  if [[ "$real_src" == "$real_dest" ]]; then
    @go.log FATAL "Real source and destination dirs are the same:"$'\n'\
      "  source: $src_dir"$'\n'\
      "  dest:   $dest_dir"$'\n'\
      "  real:   $real_src"
  elif [[ ! -d "$src_dir" ]]; then
    @go.log FATAL "Source directory $src_dir doesn't exist"
  elif [[ ! -d "$dest_dir" ]] && ! mkdir -p "$dest_dir"; then
    @go.log FATAL "Failed to create destination directory $dest_dir"
  elif ! tar -cf - -C "$src_dir" "${items[@]}" | tar -xf - -C "$dest_dir" ||
    [[ "${PIPESTATUS[0]}" != '0' ]]; then
    @go.log FATAL "Failed to mirror files from $src_dir to $dest_dir"
  fi
}

# --------------------------------
# IMPLEMENTATION - HERE BE DRAGONS
#
# None of the functions below this line are part of the public interface.
# --------------------------------

# @go.walk_path_forward helper to find the first missing parent directory
#
# Arguments:
#   path:  Path to examine
_@go.find_missing_parent_path() {
  __go_missing_parent="$1"

  if [[ ! -d "$1" ]]; then
    return "$_GO_EC_NOTFND"
  fi
}

# Helper function for @go.collect_file_paths
#
# Globals:
#   __go_collected_file_paths:  Caller-defined results array
#
# Arguments:
#   path:  File system path passed in by @go.walk_file_system
_@go.collect_file_paths_impl() {
  if [[ -f "$1" ]]; then
    __go_collected_file_paths+=("$1")
  fi
}

# Helper function to parse @go.copy_files_safely arguments
#
# Globals from @go.copy_files_safely set by this function:
#   __go_src_dir:          Value of --src-dir
#   __go_dir_mode:         Value of --dir-mode
#   __go_file_mode:        Value of --file_mode
#   __go_diff_files_args:  Value of --edit
#   __go_verbose:          Value of --verbose
#   __go_src_files:        Source files
#   __go_dest_dir:         Destination directory
#
# Arguments:
#   $@:  All arguments to @go.copy_files_safely
_@go.parse_copy_files_safely_args() {
  while [[ "$#" -ne '0' ]]; do
    case "$1" in
    --src-dir)
      @go.canonicalize_path --pwd '__go_src_dir' "$2"
      shift 2
      ;;
    --dir-mode)
      __go_dir_mode=('--mode' "$2")
      shift 2
      ;;
    --file-mode)
      __go_file_mode="$2"
      shift 2
      ;;
    --edit)
      __go_diff_files_args=('--edit')
      shift
      ;;
    --verbose)
      __go_verbose='true'
      shift
      ;;
    *)
      __go_src_files=("${@:1:$(($# - 1))}")
      __go_dest_dir="${!#}"
      @go.canonicalize_path --pwd '__go_dest_dir' "$__go_dest_dir"
      break
      ;;
    esac
  done
}

# Helper for @go.copy_files_safely that ensures the source files are valid
#
# If `__go_src_dir` is set, it's assumed that it is a canonicalized absolute
# path, thanks to `_@go.parse_copy_files_safely_args`.
#
# If no args are provided and `__go_src_dir` is set, `__go_src_files` will
# contain the relative paths of all regular files from that directory.
#
# Otherwise, all args are validated as either valid absolute file paths or paths
# relative to `__go_src_dir`. If `__go_src_dir` isn't set, it will be assigned
# `PWD`.
#
# Globals from @go.copy_files_safely referenced or set by this function:
#   __go_src_dir:          Common parent dir for relative source file paths
#   __go_src_files:        Array in which valid source files will be stored
#   __go_src_file_errors:  Array in which any file errors will be stored
#
# Arguments:
#  $@:  Original list of file paths to validate
_@go.set_source_files_for_copy_files_safely() {
  local orig_src
  local canonical_src
  local absolute_src
  local __go_collected_file_paths

  if [[ -n "$__go_src_dir" && "$#" -eq '0' ]]; then
    @go.collect_file_paths "$__go_src_dir"
    __go_src_files=("${__go_collected_file_paths[@]#$__go_src_dir/}")
    return "$_GO_EC_OK"
  fi
  __go_src_dir="${__go_src_dir:-$PWD}"
  __go_src_files=()

  for orig_src in "$@"; do
    @go.canonicalize_path  --parent "$__go_src_dir" 'absolute_src' "$orig_src"
    canonical_src="${absolute_src#$__go_src_dir/}"

    if [[ -z "$orig_src" ]]; then
      __go_source_file_errors+=("The empty string isn't a valid file name")
    elif [[ "$canonical_src" == "$__go_src_dir" ]]; then
      __go_source_file_errors+=("The --src-dir can't be a file path argument")
    elif [[ ! -e "$absolute_src" ]]; then
      __go_source_file_errors+=("File does not exist: $absolute_src")
    elif [[ ! -f "$absolute_src" ]]; then
      __go_source_file_errors+=("Path is not a regular file: $absolute_src")
    elif [[ "${orig_src:0:1}" == '/' ]]; then
      __go_src_files+=("$absolute_src")
    else
      __go_src_files+=("$canonical_src")
    fi
  done

  if [[ "${#__go_source_file_errors[@]}" -gt 0 ]]; then
    return "$_GO_EC_GENERR"
  fi
  return "$_GO_EC_OK"
}

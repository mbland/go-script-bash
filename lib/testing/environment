#! /bin/bash
#
# Common environment setup and helper functions for all go-script-bash tests
#
# You may source this from your own applications' `environment.bash` file thus:
#
#   . "$_GO_CORE_DIR/lib/testing/environment"
#
# See `$GO_CORE_DIR/tests/environment.bash` for an example.
#
# Many of these functions depend on functions from
# `$_GO_CORE_DIR/lib/bats/helpers`. See the comments for those functions for
# further details.

. "$_GO_CORE_DIR/lib/bats/helper-function"
. "$_GO_CORE_DIR/lib/bats/helpers"

# Avoid having to fold our test strings. Tests that verify folding behavior will
# override this.
COLUMNS=1000

# Many tests assume the output is generated by running the script directly, so
# we clear the _GO_CMD variable in case the test suite was invoked using a shell
# function.
unset -v _GO_CMD

# Clear all user-definable `readonly` (and potentially user-definable `export`)
# module variables to avoid interference with test conditions.
unset -v _GO_MAX_FILE_DESCRIPTORS "${!_GO_LOG@}" "${!__GO_LOG@}"

# TEST_GO_ROOTDIR contains a space to help ensure that variables are quoted
# properly in most places.
readonly TEST_GO_ROOTDIR="$BATS_TEST_ROOTDIR"
readonly TEST_GO_SCRIPT="$TEST_GO_ROOTDIR/go"
readonly TEST_GO_SCRIPTS_RELATIVE_DIR="scripts"
readonly TEST_GO_SCRIPTS_RELATIVE_DIR_2="scripts-2"
readonly TEST_GO_SCRIPTS_DIR="$TEST_GO_ROOTDIR/$TEST_GO_SCRIPTS_RELATIVE_DIR"
readonly TEST_GO_SCRIPTS_DIR_2="$TEST_GO_ROOTDIR/$TEST_GO_SCRIPTS_RELATIVE_DIR_2"
readonly TEST_GO_PLUGINS_DIR="$TEST_GO_SCRIPTS_DIR/plugins"
readonly TEST_GO_PLUGINS_DIR_2="$TEST_GO_SCRIPTS_DIR_2/plugins"
# Variables with the '_2' suffix are used to test that multiple
# _GO_SCRIPTS_DIRS work as expected.

# Recursively removes `TEST_GO_ROOTDIR`
#
# Call this from `teardown` if your tests create any files or directories in
# `TEST_GO_ROOTDIR`.
@go.remove_test_go_rootdir() {
  set "$DISABLE_BATS_SHELL_OPTIONS"
  remove_bats_test_dirs
  restore_bats_shell_options "$?"
}

# Creates an executable `./go` script as `TEST_GO_SCRIPT`
#
# The `. "$_GO_CORE_DIR/go-core.bash"` line is included, so callers need only
# supply the remaining lines. Two _GO_SCRIPT_DIRS are specified. The first is
# `TEST_GO_SCRIPTS_DIR_2` and the second `TEST_GO_SCRIPTS_DIR`. The latter is
# used as the main command script destination in the tests, while the former is
# specified to test if _GO_SCRIPTS_DIRS are looped properly during execution.
# The function, also automatically creates `TEST_GO_SCRIPTS_DIR` and
# `TEST_GO_SCRIPTS_DIR_2`.
#
# Arguments:
#   ...:  Lines comprising the `./go` script
@go.create_test_go_script() {
  set "$DISABLE_BATS_SHELL_OPTIONS"
  create_bats_test_script 'go' \
    ". '$_GO_CORE_DIR/go-core.bash' \
      '$TEST_GO_SCRIPTS_RELATIVE_DIR_2' \
      '$TEST_GO_SCRIPTS_RELATIVE_DIR'" \
    "$@"

  # Most tests should assume this directory is present. Those that don't should
  # remove it explicitly.
  if [[ ! -d "$TEST_GO_SCRIPTS_DIR" ]]; then
    mkdir "$TEST_GO_SCRIPTS_DIR"
  fi
  if [[ ! -d "$TEST_GO_SCRIPTS_DIR_2" ]]; then
    mkdir "$TEST_GO_SCRIPTS_DIR_2"
  fi
  restore_bats_shell_options "$?"
}

# Sets `_GO_CMD` to make for neater test output when running `TEST_GO_SCRIPT`
#
# Use `run test-go` instead of `run "$TEST_GO_SCRIPT"` to achieve the effect.
#
# Useful for tests that contain `_GO_CMD` in the output, to avoid clouding the
# output with the full `TEST_GO_SCRIPT` path.
#
# Arguments:
#    ...:  Command line arguments for `TEST_GO_SCRIPT`
test-go() {
  _GO_CMD="$FUNCNAME" "$TEST_GO_SCRIPT" "$@"
}

# Creates an executable `./go` command script in `TEST_GO_SCRIPTS_DIR`
#
# The script will be created as `$TEST_GO_SCRIPTS_DIR/$script_name`.
#
# Arguments:
#   script_name:  Name of the command script
#   ...:          Lines comprising the `./go` command script
@go.create_test_command_script() {
  set "$DISABLE_BATS_SHELL_OPTIONS"
  create_bats_test_script "$TEST_GO_SCRIPTS_RELATIVE_DIR/$1" "${@:2}"
  restore_bats_shell_options "$?"
}

# Creates empty "parent" and "child" command scripts in `TEST_GO_SCRIPTS_DIR`
#
# The "parent" is created as `$TEST_GO_SCRIPTS_DIR/$parent`, and each
# "child" script is created as `$TEST_GO_SCRIPTS_DIR/${parent}.d/$child".
#
# Primarily useful for testing tab completion of commands that operate on other
# commands, such as `help` or `path`.
#
# Arguments:
#   parent_name:  Name of the "parent" command script
#   ...:          Names of "child" command scripts
@go.create_parent_and_subcommands() {
  set "$DISABLE_BATS_SHELL_OPTIONS"
  __@go.create_parent_and_subcommands "$@"
  restore_bats_shell_options "$?"
}

# Assigns the results of `@go.compgen` to a caller-defined test data array
#
# While more compact than writing a `while` loop by hand, it's also faster
# thanks to the fact that it disables the Bats function tracing mechanism.
#
# Arguments:
#   result:  Name of the caller-declared output array
#   ...:     Arguments passed directly to `@go.compgen`
@go.test_compgen() {
  set "$DISABLE_BATS_SHELL_OPTIONS"
  local completions
  local err_args

  . "$_GO_USE_MODULES" 'complete' 'strings'
  completions="$(@go.compgen "${@:2}")"

  if [[ "$?" -ne '0' || -z "$completions" ]]; then
    printf -v 'err_args' ' "%s"' "${@:2}"
    printf 'compgen failed or results were empty:%s\n' "$err_args" >&2
    restore_bats_shell_options '1'
    return
  fi
  @go.split $'\n' "$completions" "$1"
  restore_bats_shell_options "$?"
}

# --------------------------------
# IMPLEMENTATION - HERE BE DRAGONS
#
# None of the functions below this line are part of the public interface.
# --------------------------------

# Implementation for `@go.create_parent_and_subcommands`
#
# Arguments:
#   parent_name:  Name of the "parent" command script
#   ...:          Names of "child" command scripts
__@go.create_parent_and_subcommands() {
  local parent="$1"
  shift
  local subcommand

  @go.create_test_command_script "$parent"

  for subcommand in "$@"; do
    @go.create_test_command_script "$parent.d/$subcommand"
  done
}

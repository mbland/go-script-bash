#! /bin/bash
#
# Run automated tests
#
# Usage:
#   {{go}} {{cmd}} [--coverage|--edit|--list] [<glob>...]
#
# Options:
#   --coverage  Collect test coverage data using kcov (Linux only)
#   --edit      Open matching test files using `{{go}} edit`
#   --list      List test suite names without executing them
#
# Without <glob> arguments, runs (or edits, or lists) all tests. With one or
# more <glob> arguments, only runs tests matching 'tests/<glob>.bats'.
#
# If a <glob> doesn't match any test files, the command will return an error
# without running any tests. See `{{go}} help glob` for details.
#
# NOTE: If the <glob> produces errors, or generally doesn't do as you expect,
# you may need to include it in quotes so it isn't expanded by the shell
# _before_ executing the {{cmd}} command.

declare -r __GO_TEST_GLOB_ARGS=('--ignore' 'bats' 'tests' '.bats')

_test_tab_completion() {
  local word_index="$1"
  shift
  if [[ "$word_index" -eq '0' ]]; then
    compgen -W '--coverage --edit --list' -- "$1"
    if [[ "${1:0:1}" == '-' ]]; then
      return
    fi
  fi
  @go 'glob' '--complete' "$((word_index + ${#__GO_TEST_GLOB_ARGS[@]}))" \
    "${__GO_TEST_GLOB_ARGS[@]}" "$@"
}

_test_coverage() {
  . $_GO_USE_MODULES 'kcov'
  run_kcov "tests/kcov" "tests/coverage" \
    'go,go-core.bash,lib/,libexec/,scripts/' \
    '/tmp,tests/bats/' \
    'https://coveralls.io/github/mbland/go-script-bash' \
    "$@"
}

_test() {
  if [[ "$1" == '--complete' ]]; then
    # Tab completions
    shift
    _test_tab_completion "$@"
    return
  fi

  local bats_path='tests/bats/libexec/bats'

  if [[ ! -f "$bats_path" ]]; then
    git submodule update --init tests/bats
  fi

  if [[ "$1" == '--coverage' && "$_COVERAGE_RUN" != 'true' ]]; then
    shift
    local -x _COVERAGE_RUN='true'
    _test_coverage "$@"
  elif [[ "$1" == '--list' ]]; then
    shift
    @go 'glob' '--trim' "${__GO_TEST_GLOB_ARGS[@]}" "$@"
  elif [[ "$1" == '--edit' ]]; then
    shift
    local tests=($(@go 'glob' "${__GO_TEST_GLOB_ARGS[@]}" "$@"))
    @go 'edit' "${tests[@]}"
  elif [[ "$_COVERAGE_RUN" != 'true' && "$TRAVIS_OS_NAME" == 'linux' ]]; then
    # Collect coverage by default on Travis. Doesn't seem to slow anything down
    # substantially.
    _test '--coverage' "$@"
  else
    local tests=($(@go 'glob' "${__GO_TEST_GLOB_ARGS[@]}" "$@"))
    time "$BASH" "$bats_path" "${tests[@]}"
  fi
}

_test "$@"
